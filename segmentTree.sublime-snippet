<snippet>
	<content><![CDATA[
		class segmentTree {
    vector<ll> arr;
    int n;

    void buildHelper(int x, vector<int>& a, int l, int r) {
        if (l == r) {
            arr[x] = a[l];
            return;
        }

        buildHelper(2 * x + 1, a, l, (l + r) >> 1);
        buildHelper(2 * x + 2, a, ((l + r) >> 1) + 1, r);

        arr[x] = arr[2 * x + 1] + arr[2 * x + 2];
    }
    void setHelper(int i, int v, int x, int l, int r) {
        if (l == r) {
            if (l == i)
                arr[x] = v;
            return;
        }

        int mid = (l + r) >> 1;

        if ((i <= r) && (i > mid)) {
            setHelper(i, v, 2 * x + 2, mid + 1, r);
            arr[x] = arr[2 * x + 1] + arr[2 * x + 2];
        }
        else if ((i >= l) && (i <= mid)) {
            setHelper(i, v, 2 * x + 1, l, mid);
            arr[x] = arr[2 * x + 1] + arr[2 * x + 2];
        }
    }

    ll sumHelper(int i, int j, int x, int l, int r) {
        if ((j < l) || (i > r)) {
            return 0;
        }
        else if ((i <= l) && (j >= r)) {
            return arr[x];
        }
        else {
            int mid = (l + r) >> 1;
            return sumHelper(i, j, 2 * x + 1, l, mid) + sumHelper(i, j, 2 * x + 2, mid + 1, r);
        }
    }

public:
    segmentTree(int n) {
        this -> n = n;
        arr.resize(4 * n);
    }

    void build(vector<int>& a) {
        buildHelper(0, a, 0, n - 1);
    }

    void set(int i, int v) {
        setHelper(i, v, 0, 0, n - 1);
    }

    ll sum(int i, int j) {
        return sumHelper(i, j, 0, 0, n - 1);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segt</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>